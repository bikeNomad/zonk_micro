require "zonk"
require "zonk/grammar_nodes"

# generates module Zonk::Grammar
# and class Zonk::Grammar::GrammarParser 

module Zonk
  grammar Grammar

    rule word
      [a-zA-Z] [a-zA-Z0-9_-]*
    end

    # a word, but ensure that it isn't a reserved word.
    rule name
      word !{|s| reserved_word?(s[0].text_value) } <NameNode>
    end

    # a name, but look it up first.
    rule port_name
      name !{|s| port_type(s[0].text_value).nil? }
    end

    # a name, but look it up first to ensure that it isn't
    # already used for something else
    rule new_port_name
      name &{|s| port_type(s[0].text_value).nil? }
    end

    # required space
    rule rs
      ([ \t] / ('#' .* "\n"))+
    end

    # optional space
    rule os
      ([ \t] / ('#' .* "\n"))*
    end

    rule block_beg
      os '{' os
    end

    rule block_end
      os '}' os
    end

    rule digital_port
      ('digital_input' / 'digital_output') rs new_port_name
    end

    rule analog_port
      ('analog_input' / 'analog_output') rs new_port_name
    end

    rule timer_port
      'timer' rs new_port_name
    end

    rule ticker_port
      'ticker' rs new_port_name
    end

    rule port
      (digital_port / analog_port / timer_port / ticker_port) <PortNode>
    end

    rule event
      'when' rs port_name rs 
    end

    rule primitive_condition
      (!'and' word rs)*
    end

    rule condition
      'if' primitive_condition ('and' rs primitive_condition)*
    end

    rule boolean_literal
      ('true' / 'false' / '1' / '0' / [Oo] [Nn] / [Oo] [Ff] [Ff]) <BooleanLiteralNode>
    end

    rule action
      name os '=' os 
    end

    rule rule_def
      'rule' rs name block_beg
        event
        condition?
        'then' block_beg
          action*
        block_end
      block_end
    end

    rule table
      'table' rs name block_beg
        rule_def+
      block_end
    end

    rule task
      'task' rs name block_beg ports:port+ tables:table+ block_end <TaskNode>
    end

    rule application
      'application' rs name block_beg tasks:task+ block_end <ApplicationNode>
    end

  end
end

# vim: ft=treetop ts=2 sw=2 et
